CCS PCM C Compiler, Version 4.140, 22098               30-set-14 10:04

               Filename:   D:\Projetos\Timer\timer.lst

               ROM used:   473 words (23%)
                           Largest free fragment is 1575
               RAM used:   25 (11%) at main() level
                           33 (15%) worst case
               Stack:     3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   11E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.0
001D:  GOTO   020
001E:  BTFSC  0C.0
001F:  GOTO   061
0020:  BTFSS  0B.5
0021:  GOTO   024
0022:  BTFSC  0B.2
0023:  GOTO   04A
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... /*Uso do timer 0 e timer 1 com 16F628A*/ 
....................  
.................... /* 
....................  * sim.c 
....................  * 
....................  *  Created on: 10/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... /* 
....................  * sim.c 
....................  * 
....................  *  Created on: 10/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... /* 
....................  * sim.c 
....................  * 
....................  *  Created on: 10/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,NOMCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
.................... #use rs232(xmit=PIN_B2, baud=9600) 
*
007C:  BSF    03.5
007D:  BCF    06.2
007E:  BCF    03.5
007F:  BCF    06.2
0080:  MOVLW  08
0081:  MOVWF  78
0082:  GOTO   083
0083:  NOP
0084:  BSF    78.7
0085:  GOTO   094
0086:  BCF    78.7
0087:  RRF    3B,F
0088:  BTFSC  03.0
0089:  BSF    06.2
008A:  BTFSS  03.0
008B:  BCF    06.2
008C:  BSF    78.6
008D:  GOTO   094
008E:  BCF    78.6
008F:  DECFSZ 78,F
0090:  GOTO   087
0091:  GOTO   092
0092:  NOP
0093:  BSF    06.2
0094:  MOVLW  1C
0095:  MOVWF  04
0096:  DECFSZ 04,F
0097:  GOTO   096
0098:  GOTO   099
0099:  BTFSC  78.7
009A:  GOTO   086
009B:  BTFSC  78.6
009C:  GOTO   08E
009D:  RETURN
....................  
.................... #define cms_mstr	PIN_A0 
.................... #define cmd_mstr	PIN_A1 
.................... #define cms_slv		PIN_A2 
.................... #define cmd_slv		PIN_A3 
....................  
.................... #define pos_mstr	PIN_B0 
.................... #define pos_slv		PIN_B1 
....................  
.................... short ctrlMstr; 
.................... short ctrlSlv; 
.................... short ctrlFusoM; 
.................... short ctrlFusoE; 
.................... short mstr_sobe; 
.................... short slv_sobe; 
....................  
.................... signed long fuso_mstr; 
.................... signed long fuso_slv; 
.................... signed long fuso_mstrAux; 
.................... signed long fuso_slvAux; 
....................  
.................... #INT_TIMER0 
.................... void isr_tmr0() { 
.................... 	clear_interrupt(INT_TIMER0); 
*
004A:  BCF    0B.2
.................... 	output_toggle(pos_mstr); 
004B:  BSF    03.5
004C:  BCF    06.0
004D:  MOVLW  01
004E:  BCF    03.5
004F:  XORWF  06,F
.................... 	if (!ctrlFusoM) 
0050:  BTFSC  28.2
0051:  GOTO   05C
.................... 		if (mstr_sobe) 
0052:  BTFSS  28.4
0053:  GOTO   058
.................... 			fuso_mstr++; 
0054:  INCF   29,F
0055:  BTFSC  03.2
0056:  INCF   2A,F
.................... 		else 
0057:  GOTO   05C
.................... 			fuso_mstr--; 
0058:  MOVF   29,W
0059:  BTFSC  03.2
005A:  DECF   2A,F
005B:  DECF   29,F
.................... 	ctrlFusoM = !ctrlFusoM; 
005C:  MOVLW  04
005D:  XORWF  28,F
.................... } 
....................  
005E:  BCF    0B.2
005F:  BCF    0A.3
0060:  GOTO   024
.................... #INT_TIMER1 
.................... void isr_tmr1() { 
.................... 	clear_interrupt(INT_TIMER1); 
0061:  BCF    0C.0
.................... 	set_timer1(0x7FFF); 
0062:  MOVLW  7F
0063:  MOVWF  0F
0064:  MOVLW  FF
0065:  MOVWF  0E
.................... 	output_toggle(pos_slv); 
0066:  BSF    03.5
0067:  BCF    06.1
0068:  MOVLW  02
0069:  BCF    03.5
006A:  XORWF  06,F
.................... 	if (!ctrlFusoE) 
006B:  BTFSC  28.3
006C:  GOTO   077
.................... 		if (slv_sobe) 
006D:  BTFSS  28.5
006E:  GOTO   073
.................... 			fuso_slv++; 
006F:  INCF   2B,F
0070:  BTFSC  03.2
0071:  INCF   2C,F
.................... 		else 
0072:  GOTO   077
.................... 			fuso_slv--; 
0073:  MOVF   2B,W
0074:  BTFSC  03.2
0075:  DECF   2C,F
0076:  DECF   2B,F
.................... 	ctrlFusoE = !ctrlFusoE; 
0077:  MOVLW  08
0078:  XORWF  28,F
.................... } 
....................  
0079:  BCF    0C.0
007A:  BCF    0A.3
007B:  GOTO   024
.................... int main(void) { 
*
011E:  CLRF   04
011F:  BCF    03.7
0120:  MOVLW  1F
0121:  ANDWF  03,F
0122:  BSF    03.5
0123:  BSF    0E.3
0124:  BCF    06.2
0125:  BCF    03.5
0126:  BSF    06.2
0127:  MOVLW  07
0128:  MOVWF  1F
0129:  BCF    31.0
012A:  BCF    31.1
012B:  BCF    31.2
012C:  BCF    31.3
....................  
.................... 	short a = FALSE; 
.................... 	short b = FALSE; 
.................... 	short c = FALSE; 
.................... 	short d = FALSE; 
....................  
.................... 	set_timer0(0); 
012D:  CLRF   01
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_128); 
012E:  BSF    03.5
012F:  MOVF   01,W
0130:  ANDLW  C0
0131:  IORLW  06
0132:  MOVWF  01
....................  
.................... 	set_timer1(0x7FFF); 
0133:  MOVLW  7F
0134:  BCF    03.5
0135:  MOVWF  0F
0136:  MOVLW  FF
0137:  MOVWF  0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0138:  MOVLW  85
0139:  MOVWF  10
....................  
.................... 	clear_interrupt(INT_TIMER0); 
013A:  BCF    0B.2
.................... 	clear_interrupt(INT_TIMER1); 
013B:  BCF    0C.0
.................... 	enable_interrupts(GLOBAL); 
013C:  MOVLW  C0
013D:  IORWF  0B,F
....................  
.................... 	printf("Mestre,Escravo\n\r"); 
013E:  CLRF   32
013F:  MOVF   32,W
0140:  CALL   035
0141:  INCF   32,F
0142:  MOVWF  77
0143:  MOVWF  3B
0144:  CALL   07C
0145:  MOVLW  10
0146:  SUBWF  32,W
0147:  BTFSS  03.2
0148:  GOTO   13F
....................  
.................... 	output_low(pos_mstr); 
0149:  BSF    03.5
014A:  BCF    06.0
014B:  BCF    03.5
014C:  BCF    06.0
.................... 	output_low(pos_slv); 
014D:  BSF    03.5
014E:  BCF    06.1
014F:  BCF    03.5
0150:  BCF    06.1
....................  
.................... 	while (TRUE) { 
....................  
.................... 		a = input(cms_mstr); 
0151:  BSF    03.5
0152:  BSF    05.0
0153:  BCF    03.5
0154:  BCF    31.0
0155:  BTFSC  05.0
0156:  BSF    31.0
.................... 		b = input(cmd_mstr); 
0157:  BSF    03.5
0158:  BSF    05.1
0159:  BCF    03.5
015A:  BCF    31.1
015B:  BTFSC  05.1
015C:  BSF    31.1
.................... 		c = input(cms_slv); 
015D:  BSF    03.5
015E:  BSF    05.2
015F:  BCF    03.5
0160:  BCF    31.2
0161:  BTFSC  05.2
0162:  BSF    31.2
.................... 		d = input(cmd_slv); 
0163:  BSF    03.5
0164:  BSF    05.3
0165:  BCF    03.5
0166:  BCF    31.3
0167:  BTFSC  05.3
0168:  BSF    31.3
....................  
.................... 		if (a ^ b) { 
0169:  MOVLW  00
016A:  BTFSC  31.0
016B:  MOVLW  01
016C:  MOVWF  33
016D:  MOVLW  00
016E:  BTFSC  31.1
016F:  MOVLW  01
0170:  XORWF  33,W
0171:  BTFSC  03.2
0172:  GOTO   17D
.................... 			if (ctrlMstr) { 
0173:  BTFSS  28.0
0174:  GOTO   17C
.................... 				ctrlMstr = FALSE; 
0175:  BCF    28.0
.................... 				mstr_sobe = a; 
0176:  BCF    28.4
0177:  BTFSC  31.0
0178:  BSF    28.4
.................... 				clear_interrupt(INT_TIMER0); 
0179:  BCF    0B.2
.................... 				set_timer0(0); 
017A:  CLRF   01
.................... 				enable_interrupts(INT_TIMER0); 
017B:  BSF    0B.5
.................... 			} 
.................... 		} else if (!ctrlMstr) { 
017C:  GOTO   181
017D:  BTFSC  28.0
017E:  GOTO   181
.................... 			ctrlMstr = TRUE; 
017F:  BSF    28.0
.................... 			disable_interrupts(INT_TIMER0); 
0180:  BCF    0B.5
.................... 		} 
....................  
.................... 		if (c ^ d) { 
0181:  MOVLW  00
0182:  BTFSC  31.2
0183:  MOVLW  01
0184:  MOVWF  33
0185:  MOVLW  00
0186:  BTFSC  31.3
0187:  MOVLW  01
0188:  XORWF  33,W
0189:  BTFSC  03.2
018A:  GOTO   19A
.................... 			if (ctrlSlv) { 
018B:  BTFSS  28.1
018C:  GOTO   199
.................... 				ctrlSlv = FALSE; 
018D:  BCF    28.1
.................... 				slv_sobe = c; 
018E:  BCF    28.5
018F:  BTFSC  31.2
0190:  BSF    28.5
.................... 				clear_interrupt(INT_TIMER1); 
0191:  BCF    0C.0
.................... 				set_timer1(0x7FFF); 
0192:  MOVLW  7F
0193:  MOVWF  0F
0194:  MOVLW  FF
0195:  MOVWF  0E
.................... 				enable_interrupts(INT_TIMER1); 
0196:  BSF    03.5
0197:  BSF    0C.0
0198:  BCF    03.5
.................... 			} 
.................... 		} else if (!ctrlSlv) { 
0199:  GOTO   1A0
019A:  BTFSC  28.1
019B:  GOTO   1A0
.................... 			ctrlSlv = TRUE; 
019C:  BSF    28.1
.................... 			disable_interrupts(INT_TIMER1); 
019D:  BSF    03.5
019E:  BCF    0C.0
019F:  BCF    03.5
.................... 		} 
.................... 		if ((fuso_mstr != fuso_mstrAux) || (fuso_slv != fuso_slvAux)) { 
01A0:  MOVF   2D,W
01A1:  SUBWF  29,W
01A2:  BTFSS  03.2
01A3:  GOTO   1B0
01A4:  MOVF   2E,W
01A5:  SUBWF  2A,W
01A6:  BTFSS  03.2
01A7:  GOTO   1B0
01A8:  MOVF   2F,W
01A9:  SUBWF  2B,W
01AA:  BTFSS  03.2
01AB:  GOTO   1B0
01AC:  MOVF   30,W
01AD:  SUBWF  2C,W
01AE:  BTFSC  03.2
01AF:  GOTO   1D5
.................... 			fuso_mstrAux = fuso_mstr; 
01B0:  MOVF   2A,W
01B1:  MOVWF  2E
01B2:  MOVF   29,W
01B3:  MOVWF  2D
.................... 			fuso_slvAux = fuso_slv; 
01B4:  MOVF   2C,W
01B5:  MOVWF  30
01B6:  MOVF   2B,W
01B7:  MOVWF  2F
.................... 			delay_us(10); 
01B8:  MOVLW  02
01B9:  MOVWF  77
01BA:  DECFSZ 77,F
01BB:  GOTO   1BA
01BC:  GOTO   1BD
01BD:  NOP
.................... 			printf("%ld,%ld\n\r", fuso_mstr, fuso_slv); 
01BE:  MOVLW  10
01BF:  MOVWF  04
01C0:  MOVF   2A,W
01C1:  MOVWF  33
01C2:  MOVF   29,W
01C3:  MOVWF  32
01C4:  CALL   09E
01C5:  MOVLW  2C
01C6:  MOVWF  3B
01C7:  CALL   07C
01C8:  MOVLW  10
01C9:  MOVWF  04
01CA:  MOVF   2C,W
01CB:  MOVWF  33
01CC:  MOVF   2B,W
01CD:  MOVWF  32
01CE:  CALL   09E
01CF:  MOVLW  0A
01D0:  MOVWF  3B
01D1:  CALL   07C
01D2:  MOVLW  0D
01D3:  MOVWF  3B
01D4:  CALL   07C
....................  
.................... 		} 
.................... 	} // infinite loop 
01D5:  GOTO   151
.................... 	return 0; 
01D6:  MOVLW  00
01D7:  MOVWF  78
.................... } // main 
01D8:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
